@using BIManagement.Common.Shared.Results
@using BIManagement.Modules.Users.Application.UserManagement
@using BIManagement.Modules.Users.Domain
@using BIManagement.Modules.Users.Pages.Users.Components
@inject IUserManager UserManager;
@inject NavigationManager NavigationManager;
@* Not using @page directive to utilize static routes class *@
@attribute [Route(Routes.CustomerInfo)]
@rendermode InteractiveServer

<PageTitle>Customer</PageTitle>

<h3>Customer</h3>

@if (userResult?.IsSuccess is not null and true)
{
    var user = userResult.Value;
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Attribute</th>
                <th scope="col">Value</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>User Id:</td>
                <td>@user.Id</td>
            </tr>
            <tr>
                <td>Email:</td>
                <td>@user.Email</td>
            </tr>
            <tr>
                <td>Confirmed Email:</td>
                <td>@user.EmailConfirmed</td>
            </tr>
            <tr>
                <td>User Name:</td>
                <td>@user.Name</td>
            </tr>
        </tbody>
    </table>

    <DeleteUserButtonModal user="@user" OnSuccesfulDelete="() => NavigationManager.NavigateTo(Routes.Customers)" />
    
    @* TODO: deployment state *@
}
else
{
    <p>Customer not found.</p>
}

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private Result<ApplicationUser>? userResult;

    protected override async Task OnInitializedAsync() => userResult = await UserManager.GetCustomer(Id);
}
