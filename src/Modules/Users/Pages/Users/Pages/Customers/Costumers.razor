@namespace BIManagementPlatform.Modules.Users.Pages
@using BIManagement.Modules.Users.Application.UserManagement
@using BIManagement.Modules.Users.Domain
@using BIManagement.Modules.Users.Pages
@using Microsoft.AspNetCore.Identity
@* Not using @page directive to utilize static routes class *@
@attribute [Route(Routes.Customers)]
<PageTitle>Customers</PageTitle>
<h3>Customers</h3>


@inject IUserManager UserManager;

<a href=@Routes.AddCustomer class="btn btn-primary">Add Customer</a>
@if (Users is not null && Users.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">User name</th>
                <th scope="col">Full name</th>
                @* @if (AdditionalInformation is not null) // TODO: DELETE if not needed
                {
                    <th scope="col">@AdditionalInformation.NameOfValue</th>
                } *@
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users) // Consider using virtualization if the list is too long - https://learn.microsoft.com/en-us/aspnet/core/blazor/components/virtualization
            {
                <tr>
                    <td><a href=@Routes.GetCustomerInfo(user.Id)>@user.Id</a></td>
                    <td>@user.UserName</td>
                    <td>@user.Name</td>
@*                     @if (AdditionalInformation is not null)
                    {
                        <th scope="col">
                            @{
                                AdditionalInformation.AdditionalValueFunc(user); 
                            }
                        </th>
                    } *@
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No customers found</p>
}

@code {
    private IList<ApplicationUser>? Users { get; set; }

    // [Parameter]
    // public AdditionalInformationPair? AdditionalInformation { get; set; }

    protected override async Task OnInitializedAsync()
        => Users = await UserManager.GetUsersByRoleAsync(Roles.Customer);

    // /// <summary>
    // /// Encapsulates additional information to be displayed in the user list.
    // /// </summary>
    // /// <param name="additionalValueFunc">Function delegate to get the additional information.</param>
    // /// <param name="nameOfValue">Name of the value to be displayed.</param>
    // public class AdditionalInformationPair(Func<ApplicationUser, Task<string>> additionalValueFunc, string nameOfValue)
    // {
    //     public Func<ApplicationUser, Task<string>> AdditionalValueFunc { get; init; } = additionalValueFunc;
    //     public string NameOfValue { get; init; } = nameOfValue;
    // }
}