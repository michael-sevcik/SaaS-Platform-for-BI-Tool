@using BIManagement.Modules.Users.Api
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@using System.ComponentModel.DataAnnotations
@using Microsoft.Data.SqlClient
@using Microsoft.Extensions.Logging
@inject ILogger<DatabaseConnectionConfigurationForm> Logger

@inject IUserAccessor UserAccessor


<EditForm Model="Input" FormName="DatabaseConnection" OnValidSubmit="OnValidSubmitAsync" method="post">
    <BIManagement.Common.Components.StatusMessage Message="@message" />
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="body">Select your database provider: </label>
            <div class="col-sm-10">
                <InputSelect class="form-control" @bind-Value="@Input.DatabaseType" DisplayName="Database provider selection">
                    @foreach (var country in Enum.GetValues(typeof(DatabaseType)))
                    {
                        <option value="@country">@country</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Input.DatabaseType)" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="dataSource">Data Source:</label>
            <div class="col-sm-10">

                <InputText type="text" class="form-control" id="dataSource" @bind-Value="@Input.DataSource" />
                <ValidationMessage For="() => Input.DataSource" class="text-danger" />

            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="initialCatalog">Initial Catalog:</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" placeholder="Leave blank if not applicable." id="initialCatalog" @bind-Value="@Input.InitialCatalog" />
                <ValidationMessage For="() => Input.InitialCatalog" class="text-danger" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="integratedSecurity">Integrated Security:</label>
            <div class="col-sm-10">
                <InputCheckbox type="checkbox" class="form-check-input" id="integratedSecurity" @bind-Value="@Input.IntegratedSecurity" />
                <ValidationMessage For="() => Input.IntegratedSecurity" class="text-danger" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="connectTimeout">Connect Timeout:</label>
            <div class="col-sm-10">
                <InputNumber type="text" class="form-control" id="connectTimeout" @bind-Value="@Input.ConnectTimeout" />
                <ValidationMessage For="() => Input.ConnectTimeout" class="text-danger" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="encrypt">Encrypt:</label>
            <div class="col-sm-10">
                <InputCheckbox type="checkbox" class="form-check-input" id="encrypt" @bind-Value="@Input.Encrypt" />
                <ValidationMessage For="() => Input.Encrypt" class="text-danger" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="trustServerCertificate">Trust Server Certificate:</label>
            <div class="col-sm-10">
                <InputCheckbox type="checkbox" class="form-check-input" id="trustServerCertificate" @bind-Value="@Input.TrustServerCertificate" />
                <ValidationMessage For="() => Input.TrustServerCertificate" class="text-danger" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="applicationIntent">Application Intent:</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" id="applicationIntent" @bind-Value="@Input.ApplicationIntent" />
                <ValidationMessage For="() => Input.ApplicationIntent" class="text-danger" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="multiSubnetFailover">Multi Subnet Failover:</label>
            <div class="col-sm-10">
                <InputCheckbox type="checkbox" class="form-check-input" id="multiSubnetFailover" @bind-Value="@Input.MultiSubnetFailover" />
                <ValidationMessage For="() => Input.MultiSubnetFailover" class="text-danger" />
            </div>
        </div>
    </div>

    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>


@code {
    private string? message;
    private string? userId;
    private string? username;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        message = null;
        userId = await UserAccessor.GetUserIdAsync(HttpContext) 
            ?? throw new InvalidOperationException("User ID is not available.");

        // Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        message = null;
        // TODO: ENSURE client can't connect to the main DB.
        // TODO: USE SQL CONNECTION STRING BUILDER
        Microsoft.Data.SqlClient.SqlConnectionStringBuilder builder = new();
        builder.DataSource = Input.DataSource;
        if (Input.InitialCatalog.Length != 0)
        {
            builder.InitialCatalog = Input.InitialCatalog;
        }

        builder.IntegratedSecurity = Input.IntegratedSecurity;
        builder.ConnectTimeout = Input.ConnectTimeout;
        builder.Encrypt = Input.Encrypt ?
            SqlConnectionEncryptOption.Mandatory
            : SqlConnectionEncryptOption.Optional;

        builder.TrustServerCertificate = Input.TrustServerCertificate;
        builder.ApplicationIntent = Input.ApplicationIntent == "ReadOnly" ?
            ApplicationIntent.ReadOnly
            : ApplicationIntent.ReadWrite;

        // TODO: CHANGE THE FORM TO FIT USER WITH PASSWORD
        builder.MultiSubnetFailover = Input.MultiSubnetFailover;

        // TODO: DELETE
        Logger.LogDebug("Connection string: {0}", builder.ConnectionString);

        using SqlConnection sqlConnection = new(builder.ConnectionString);
        try
        {
            await sqlConnection.OpenAsync();
        }
        catch (InvalidOperationException)
        {
            message = "Cannot open a connection without specifying a data source or server.";
        }
        catch (SqlException)
        {
            message = "There was a problem establishing a connection with the specified user name and password.";
        }
        catch (System.Configuration.ConfigurationErrorsException)
        {
            message = "There was a problem establishing a connection with the specified user name and password.";
        }

        switch (sqlConnection.State)
        {
            case System.Data.ConnectionState.Open:
                message = "Connection established successfully.";
                break;
        }

        var tables = sqlConnection.GetSchema("Tables");

        Logger.LogInformation("Tables: {0}", tables.Rows.Count);

        // In case of costumer redirect to mapper
    }

    public enum DatabaseType
    {
        SqlServer,
        MySql,
        PostgreSql,
        Oracle,
        Sqlite
    }

    // TODO: REMOVE defaults
    internal sealed class InputModel
    {
        [Display(Name = "Database Type")]
        public DatabaseType DatabaseType { get; set; } = DatabaseType.Sqlite;

        [Required(ErrorMessage = "Data Source is required.")]
        [MinLength(1, ErrorMessage = "Data Source must be at least 1 character long.")]
        // TODO: USE __INTERNAL__ in internally deployed databases to prevent client from connecting to them.
        [RegularExpression("^(?!.*__INTERNAL__).+$", ErrorMessage = "Data Source cannot contain '__INTERNAL__', or new lines.")]
        public string DataSource { get; set; } = "(localdb)\\MSSQLLocalDB";

        public string InitialCatalog { get; set; } = "SaaSPlatform";

        public bool IntegratedSecurity { get; set; } = true;

        [Range(0, 7200, ErrorMessage = "Connect Timeout must be a non-negative integer smaller than or equal to 7200.")]
        public int ConnectTimeout { get; set; } = 30;

        public bool Encrypt { get; set; } = false;
        public bool TrustServerCertificate { get; set; } = false;

        [Required(ErrorMessage = "Application Intent is required.")]
        public string ApplicationIntent { get; set; } = "ReadOnly";

        public bool MultiSubnetFailover { get; set; } = false;
    }
}
